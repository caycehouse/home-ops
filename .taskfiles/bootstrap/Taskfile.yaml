---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  BOOTSTRAP_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/bootstrap/resources'

tasks:

  talos:
    desc: Bootstrap Talos [CLUSTER=main]
    cmds:
      - { task: ":talos:bootstrap-genconfig", vars: *vars }
      - { task: ":talos:bootstrap-apply", vars: *vars }
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name {{.CLUSTER}} {{.CLUSTER_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talos/clusterconfig/talosconfig
      - talosctl config info &>/dev/null

  # NOTE: Expects all nodes are part of the Ceph cluster and have the same Ceph disk path
  rook:
    desc: Bootstrap Rook-Ceph [CLUSTER=main] [DISK=/dev/nvme0n1]
    cmds:
      - minijinja-cli {{.BOOTSTRAP_RESOURCES_DIR}}/wipe-rook-job.yaml.j2 | kubectl apply --server-side --filename -
      - until kubectl --namespace default get job/wipe-rook &>/dev/null; do sleep 5; done
      - kubectl --namespace default wait job/wipe-rook --for=condition=complete --timeout=5m
      - kubectl --namespace default logs job/wipe-rook
      - kubectl --namespace default delete job wipe-rook
    env:
      DISK: '{{.DISK | default "/dev/nvme0n1"}}'
      NODES:
        sh: talosctl config info --output json | jq --raw-output '.nodes | length'
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/wipe-rook-job.yaml.j2

  apps:
    desc: Bootstrap Apps [CLUSTER=main]
    cmds:
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - helmfile --quiet --file {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait nodes --for=condition=Ready --all --timeout=10m; do sleep 5; done
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talos/clusterconfig/talosconfig
      - test -f {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml
      - talosctl config info &>/dev/null

  flux:
    desc: Bootstrap Flux [CLUSTER=main]
    cmds:
      - kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/bootstrap/apps
      - for: { var: TEMPLATES }
        cmd: op run --env-file {{.CLUSTER_DIR}}/bootstrap/bootstrap.env --no-masking -- minijinja-cli {{.ITEM}} | kubectl apply --server-side --filename -
      - sops --decrypt {{.CLUSTER_DIR}}/flux/vars/cluster-secrets.secret.sops.yaml | kubectl apply --server-side --filename -
      - kubectl apply --server-side --filename {{.CLUSTER_DIR}}/flux/vars/cluster-settings.yaml
      - kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/flux/config
    vars:
      TEMPLATES:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/apps/*.j2
    env:
      VAULT: '{{if eq .CLUSTER "main"}}kubernetes{{else}}{{.CLUSTER}}{{end}}' # ¯\_(ツ)_/¯
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/flux/vars/cluster-settings.yaml
