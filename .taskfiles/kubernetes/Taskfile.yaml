---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  apply-ks:
    desc: Apply a Flux KS for a cluster [CLUSTER=main] [PATH=required] [NS=flux-system]
    cmd: >
      flux build --namespace {{.NS}} ks {{base .PATH}}
      --kustomization-file {{.CLUSTER_DIR}}/apps/{{.PATH}}/ks.yaml
      --path {{.CLUSTER_DIR}}/apps/{{.PATH}}
      {{- if contains "not found" .KS }}--dry-run \{{ end }}
      | yq 'with(select(.apiVersion == "kustomize.toolkit.fluxcd.io/v1" and .kind == "Kustomization"); .metadata.namespace = "{{.NS}}")' -
      | kubectl apply --server-side --field-manager=kustomize-controller --filename -
    requires:
      vars: [CLUSTER, PATH]
    vars:
      NS: '{{.NS | default "flux-system"}}'
      KS:
        sh: flux --namespace {{.NS}} get kustomizations {{base .PATH}} 2>&1
    preconditions:
      - test -f {{.CLUSTER_DIR}}/apps/{{.PATH}}/ks.yaml

  browse-pvc:
    desc: Mount a PVC to an temp container [CLUSTER=main] [NS=default] [CLAIM=required]
    interactive: true
    cmd: kubectl browse-pvc --namespace {{.NS}} --image docker.io/library/alpine:latest {{.CLAIM}}
    vars:
      NS: '{{.NS | default "default"}}'
    requires:
      vars: [CLUSTER, CLAIM]
    preconditions:
      - kubectl --namespace {{.NS}} get persistentvolumeclaims {{.CLAIM}}

  k9s:
    desc: Run k9s on given cluster [CLUSTER=main]
    interactive: true
    cmd: k9s --context {{.CLUSTER}}
    requires:
      vars: [CLUSTER]

  privileged:
    desc: Run a privileged pod [CLUSTER=main] [HOSTNAME=required] [IMAGE=alpine]
    interactive: true
    cmds:
      - |
        kubectl debug --context {{.CLUSTER}} --namespace kube-system -it --image {{.IMAGE}} node/{{.HOSTNAME}}
    requires:
      vars: [CLUSTER, HOSTNAME, IMAGE]

  sync-secrets:
    desc: Sync all ExternalSecrets [CLUSTER=main]
    cmds:
      - for: { var: SECRETS, split: "\n" }
        cmd: kubectl --namespace {{splitList "," .ITEM | first}} annotate externalsecret {{splitList "," .ITEM | last}} force-sync="{{.TS}}" --overwrite
    vars:
      TS: '{{now | unixEpoch}}'
      SECRETS:
        sh: kubectl get externalsecret --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'
    requires:
      vars: [CLUSTER]

  delete-pods:
    desc: Delete pods with a Failed/Pending/Succeeded phase [CLUSTER=main]
    cmds:
      - for:
          matrix:
            PHASE: [Failed, Pending, Succeeded]
        cmd: kubectl delete pods --field-selector status.phase={{.ITEM.PHASE}} -A --ignore-not-found=true
    requires:
      vars: [CLUSTER]
