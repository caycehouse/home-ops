---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:
  bootstrap-genconfig:
    desc: Generate clusterconfig for Talos
    cmds:
      - talhelper genconfig
        --secret-file {{.CLUSTER_DIR}}/bootstrap/talos/talsecret.sops.yaml
        --config-file {{.CLUSTER_DIR}}/bootstrap/talos/talconfig.yaml
        --out-dir {{.CLUSTER_DIR}}/bootstrap/talos/clusterconfig
    requires:
      vars: ['CLUSTER']
    preconditions:
      - which talhelper
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/talsecret.sops.yaml
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/talconfig.yaml

  bootstrap-apply:
    desc: Apply the Talos configs to the nodes
    cmds:
      - talhelper gencommand apply
        --extra-flags=--insecure
        --config-file {{.CLUSTER_DIR}}/bootstrap/talos/talconfig.yaml
        --out-dir {{.CLUSTER_DIR}}/bootstrap/talos/clusterconfig | bash
    requires:
      vars: ['CLUSTER']
    preconditions:
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/talconfig.yaml
      - test -d {{.CLUSTER_DIR}}/bootstrap/talos/clusterconfig

  apply-config:
    desc: Apply Talos configuration to a node
    cmds:
      - talhelper gencommand apply
        --extra-flags=--mode={{.MODE}}
        --config-file {{.CLUSTER_DIR}}/bootstrap/talos/talconfig.yaml
        --out-dir {{.CLUSTER_DIR}}/bootstrap/talos/clusterconfig
        --node {{.HOSTNAME}} | bash
    vars:
      MODE: '{{.MODE | default "no-reboot"}}'
    env:
      KUBERNETES_VERSION:
        sh: kubectl get node {{.HOSTNAME}} --output=jsonpath="{.status.nodeInfo.kubeletVersion}"
      TALOS_VERSION:
        sh: kubectl get node {{.HOSTNAME}} --output=jsonpath="{.status.nodeInfo.osImage}" | awk -F'[()]' '{print $2}'
    requires:
      vars: [CLUSTER, HOSTNAME]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/clusterconfig/talosconfig
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/clusterconfig/{{.CLUSTER}}-{{.HOSTNAME}}.yaml
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  upgrade-node:
    desc: Upgrade Talos on a single node
    cmds:
      - task: '{{if ne true .ROLLOUT}}down{{else}}noop{{end}}'
      - talosctl --nodes {{.HOSTNAME}} upgrade --image="factory.talos.dev/installer/{{.SCHEMATIC_ID}}:{{.VERSION}}" --timeout=10m
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
      - task: '{{if ne true .ROLLOUT}}up{{else}}noop{{end}}'
    vars:
      SCHEMATIC_ID:
        sh: kubectl get node {{.HOSTNAME}} --output=jsonpath='{.metadata.annotations.extensions\.talos\.dev/schematic}'
    requires:
      vars: [CLUSTER, HOSTNAME, VERSION]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/clusterconfig/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/talos/releases/tag/{{.VERSION}}

  upgrade-cluster:
    desc: Upgrade Talos on the whole cluster
    cmds:
      - task: down
      - for: { var: HOSTNAMES }
        task: upgrade-node
        vars:
          HOSTNAME: '{{.ITEM}}'
          VERSION: '{{.VERSION}}'
          ROLLOUT: true
      - task: up
    vars:
      HOSTNAMES:
        sh: kubectl get nodes --output=jsonpath='{.items[*].metadata.name}'
    requires:
      vars: [CLUSTER, VERSION]

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmds:
      - task: down
      - talosctl --nodes {{.CONTROLLER}} upgrade-k8s --to {{.VERSION}}
      - task: up
    vars:
      CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER, VERSION]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/clusterconfig/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.CONTROLLER}} get machineconfig &>/dev/null
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/{{.VERSION}}

  reset-node:
    desc: Reset a Talos node and shut it down
    prompt: Reset Talos '{{.HOSTNAME}}' node on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.HOSTNAME}} --graceful=false
    requires:
      vars: [CLUSTER, HOSTNAME]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/clusterconfig/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  reset-cluster:
    desc: Reset all the Talos nodes and shut 'em down
    prompt: Reset Talos on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.HOSTNAMES}} --graceful=false
    vars:
      HOSTNAMES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/clusterconfig/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.NODES}} get machineconfig &>/dev/null

  down:
    internal: true
    cmds:
      - flux --namespace flux-system suspend kustomization --all
      - kubectl cnpg maintenance set --reusePVC --all-namespaces
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - kubectl --namespace volsync-system scale deployment --all --replicas 0

  up:
    internal: true
    cmds:
      - until kubectl wait --timeout=10m --for=jsonpath=.status.ceph.health=HEALTH_OK cephcluster --all --all-namespaces; do sleep 10; done
      - defer: flux --namespace flux-system resume kustomization --all
      - defer: kubectl cnpg maintenance unset --all-namespaces
      - defer: kubectl --namespace volsync-system scale deployment --all --replicas 1

  noop:
    internal: true
    silent: true
    cmd: noop() { :; }
