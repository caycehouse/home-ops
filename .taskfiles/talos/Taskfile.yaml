---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

x-vars: &vars
  KUBERNETES_VERSION:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.KUBERNETES_VERSION' {{.KUBERNETES_DIR}}/{{.CLUSTER}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  TALOS_CONTROLLER:
    sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
  TALOS_SCHEMATIC_ID:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_SCHEMATIC_ID' {{.KUBERNETES_DIR}}/{{.CLUSTER}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  TALOS_VERSION:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_VERSION' {{.KUBERNETES_DIR}}/{{.CLUSTER}}/apps/system-upgrade/system-upgrade-controller/ks.yaml

tasks:

  bootstrap-genconfig:
    desc: Generate clusterconfig for Talos
    cmds:
      - talhelper genconfig
        --secret-file {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/talsecret.sops.yaml
        --config-file {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/talconfig.yaml
        --out-dir {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/clusterconfig
    requires:
      vars: ["CLUSTER"]
    preconditions:
      - which talhelper
      - test -f {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/talsecret.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/talconfig.yaml

  bootstrap-apply:
    desc: Apply the Talos configs to the nodes
    cmds:
      - talhelper gencommand apply
        --extra-flags=--insecure
        --config-file {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/talconfig.yaml
        --out-dir {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/clusterconfig | bash
    requires:
      vars: ['CLUSTER']
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/talconfig.yaml
      - test -d {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/clusterconfig

  apply-config:
    desc: Apply Talos configuration to a node
    cmds:
      - talhelper gencommand apply
        --extra-flags=--mode={{.MODE}}
        --config-file {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/talconfig.yaml
        --out-dir {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/clusterconfig
        --node {{.HOSTNAME}} | bash
    vars:
      MODE: '{{.MODE | default "no-reboot"}}'
    env: *vars
    requires:
      vars: ['CLUSTER', 'HOSTNAME']
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/clusterconfig/talosconfig
      - test -f {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/clusterconfig/{{.CLUSTER}}-{{.HOSTNAME}}.yaml
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  upgrade:
    desc: Upgrade Talos on a node
    cmds:
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - talosctl --nodes {{.HOSTNAME}} upgrade --image="factory.talos.dev/installer/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}" --timeout=10m
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
      - until kubectl wait --timeout=5m --for=jsonpath=.status.ceph.health=HEALTH_OK cephcluster --all --all-namespaces; do sleep 10; done
    vars: *vars
    requires:
      vars: ['CLUSTER', 'HOSTNAME']
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/clusterconfig/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmds:
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - talosctl --nodes {{.TALOS_CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars: *vars
    requires:
      vars: ['CLUSTER']
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/clusterconfig/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.TALOS_CONTROLLER}} get machineconfig &>/dev/null

  reset-node:
    desc: Reset a Talos node and shut it down
    prompt: Reset Talos '{{.HOSTNAME}}' node on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.HOSTNAME}} --graceful=false
    requires:
      vars: ['CLUSTER', 'HOSTNAME']
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/clusterconfig/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  reset-cluster:
    desc: Reset all the Talos nodes and shut 'em down
    prompt: Reset Talos on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.NODES}} --graceful=false
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars: ['CLUSTER']
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.CLUSTER}}/bootstrap/talos/clusterconfig/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.NODES}} get machineconfig &>/dev/null
