---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app miniflux
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      miniflux:
        replicas: 2
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/caycehouse/postgres-init
              tag: 16
            envFrom: &envFrom
              - secretRef:
                  name: miniflux-secret
        containers:
          app:
            image:
              repository: ghcr.io/miniflux/miniflux
              tag: 2.1.3-distroless@sha256:64037785614ddcc06676b71d1e451b4100ca4f9e15a72b75a695a42af7bad094
            env:
              BASE_URL: https://rss.${SECRET_DOMAIN}
              CREATE_ADMIN: "1"
              # DEBUG: "1"
              LOG_DATE_TIME: "1"
              METRICS_ALLOWED_NETWORKS: 10.69.0.0/16
              METRICS_COLLECTOR: "1"
              OAUTH2_CLIENT_ID: miniflux
              OAUTH2_USER_CREATION: "1"
              OAUTH2_OIDC_DISCOVERY_ENDPOINT: https://auth.${SECRET_DOMAIN}
              OAUTH2_PROVIDER: oidc
              OAUTH2_REDIRECT_URL: https://rss.${SECRET_DOMAIN}/oauth2/oidc/callback
              POLLING_SCHEDULER: entry_frequency
              POLLING_FREQUENCY: "15"
              PORT: &port 80
              RUN_MIGRATIONS: "1"
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /healthcheck
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 256Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile: { type: RuntimeDefault }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/worker
                    operator: Exists
    service:
      app:
        controller: miniflux
        ports:
          http:
            port: *port
    serviceMonitor:
      app:
        serviceName: miniflux
        endpoints:
          - port: http
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
    ingress:
      app:
        className: external
        hosts:
          - host: "rss.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
          gethomepage.dev/description: Minimalist and opinionated feed reader
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Reading
          gethomepage.dev/href: "https://rss.${SECRET_DOMAIN}"
          gethomepage.dev/icon: miniflux
          gethomepage.dev/name: Miniflux
          gethomepage.dev/widget.type: miniflux
          gethomepage.dev/widget.url: http://miniflux.default.svc.cluster.local
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_MINIFLUX_API_KEY}}` }}"
