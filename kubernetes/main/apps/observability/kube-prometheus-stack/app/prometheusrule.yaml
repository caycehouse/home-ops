---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/monitoring.coreos.com/prometheusrule_v1.json
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: miscellaneous-rules
spec:
  groups:
    - name: dockerhub
      rules:
        - alert: BootstrapRateLimitRisk
          annotations:
            summary: Kubernetes cluster at risk of being rate limited by dockerhub on bootstrap
          expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
          for: 15m
          labels:
            severity: critical
    - name: oom
      rules:
        - alert: OOMKilled
          annotations:
            summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
          expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
          labels:
            severity: critical
    - name: kubernetes-storage
      rules:
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: >-
              The PersistentVolume claimed by {{ $labels.persistentvolumeclaim
              }} in Namespace {{ $labels.namespace }} {{ with $labels.cluster
              -}} on Cluster {{ . }} {{- end }} is only {{ $value |
              humanizePercentage }} free.
            runbook_url: >-
              https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumefillingup
            summary: PersistentVolume is filling up.
          expr: >-
            (
              kubelet_volume_stats_available_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet", namespace=~".*", metrics_path="/metrics"}
            ) < 0.20

            and

            kubelet_volume_stats_used_bytes{job="kubelet", namespace=~".*",
            metrics_path="/metrics"} > 0

            unless on (cluster, namespace, persistentvolumeclaim)

            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"}
            == 1

            unless on (cluster, namespace, persistentvolumeclaim)

            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"}
            == 1
          for: 1m
          labels:
            severity: critical
